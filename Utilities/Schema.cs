#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="eecs393_project")]
public partial class Eecs393_project : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertProject(Project instance);
  partial void UpdateProject(Project instance);
  partial void DeleteProject(Project instance);
  partial void InsertSprint(Sprint instance);
  partial void UpdateSprint(Sprint instance);
  partial void DeleteSprint(Sprint instance);
  partial void InsertStory(Story instance);
  partial void UpdateStory(Story instance);
  partial void DeleteStory(Story instance);
  partial void InsertTask(Task instance);
  partial void UpdateTask(Task instance);
  partial void DeleteTask(Task instance);
  partial void InsertTeam(Team instance);
  partial void UpdateTeam(Team instance);
  partial void DeleteTeam(Team instance);
  partial void InsertUser(User instance);
  partial void UpdateUser(User instance);
  partial void DeleteUser(User instance);
  #endregion
	
	public Eecs393_project(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Eecs393_project(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Eecs393_project(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public Eecs393_project(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Project> Project
	{
		get
		{
			return this.GetTable<Project>();
		}
	}
	
	public System.Data.Linq.Table<Sprint> Sprint
	{
		get
		{
			return this.GetTable<Sprint>();
		}
	}
	
	public System.Data.Linq.Table<Story> Story
	{
		get
		{
			return this.GetTable<Story>();
		}
	}
	
	public System.Data.Linq.Table<Task> Task
	{
		get
		{
			return this.GetTable<Task>();
		}
	}
	
	public System.Data.Linq.Table<Team> Team
	{
		get
		{
			return this.GetTable<Team>();
		}
	}
	
	public System.Data.Linq.Table<User> User
	{
		get
		{
			return this.GetTable<User>();
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Project")]
public partial class Project : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Project_id;
	
	private string _Project_name;
	
	private System.DateTime _Start_date;
	
	private System.Nullable<System.DateTime> _End_date;
	
	private int _Owner;
	
	private int _Team_id;
	
	private EntityRef<User> _User;
	
	private EntityRef<Team> _Team;
	
	private EntitySet<Sprint> _Sprint;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnProject_idChanging(int value);
	partial void OnProject_idChanged();
	partial void OnProject_nameChanging(string value);
	partial void OnProject_nameChanged();
	partial void OnStart_dateChanging(System.DateTime value);
	partial void OnStart_dateChanged();
	partial void OnEnd_dateChanging(System.Nullable<System.DateTime> value);
	partial void OnEnd_dateChanged();
	partial void OnOwnerChanging(int value);
	partial void OnOwnerChanged();
	partial void OnTeam_idChanging(int value);
	partial void OnTeam_idChanged();
	#endregion
	
	public Project()
	{
		this._User = default(EntityRef<User>);
		this._Team = default(EntityRef<Team>);
		this._Sprint = new EntitySet<Sprint>(new Action<Sprint>(this.attach_Sprint), new Action<Sprint>(this.detach_Sprint));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="project_id", Storage="_Project_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Project_id
	{
		get
		{
			return this._Project_id;
		}
		set
		{
			if ((this._Project_id != value))
			{
				this.OnProject_idChanging(value);
				this.SendPropertyChanging();
				this._Project_id = value;
				this.SendPropertyChanged("Project_id");
				this.OnProject_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="project_name", Storage="_Project_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Project_name
	{
		get
		{
			return this._Project_name;
		}
		set
		{
			if ((this._Project_name != value))
			{
				this.OnProject_nameChanging(value);
				this.SendPropertyChanging();
				this._Project_name = value;
				this.SendPropertyChanged("Project_name");
				this.OnProject_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="start_date", Storage="_Start_date", DbType="Date NOT NULL")]
	public System.DateTime Start_date
	{
		get
		{
			return this._Start_date;
		}
		set
		{
			if ((this._Start_date != value))
			{
				this.OnStart_dateChanging(value);
				this.SendPropertyChanging();
				this._Start_date = value;
				this.SendPropertyChanged("Start_date");
				this.OnStart_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="end_date", Storage="_End_date", DbType="Date")]
	public System.Nullable<System.DateTime> End_date
	{
		get
		{
			return this._End_date;
		}
		set
		{
			if ((this._End_date != value))
			{
				this.OnEnd_dateChanging(value);
				this.SendPropertyChanging();
				this._End_date = value;
				this.SendPropertyChanged("End_date");
				this.OnEnd_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="owner", Storage="_Owner", DbType="Int NOT NULL")]
	public int Owner
	{
		get
		{
			return this._Owner;
		}
		set
		{
			if ((this._Owner != value))
			{
				this.OnOwnerChanging(value);
				this.SendPropertyChanging();
				this._Owner = value;
				this.SendPropertyChanged("Owner");
				this.OnOwnerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="team_id", Storage="_Team_id", DbType="Int NOT NULL")]
	public int Team_id
	{
		get
		{
			return this._Team_id;
		}
		set
		{
			if ((this._Team_id != value))
			{
				this.OnTeam_idChanging(value);
				this.SendPropertyChanging();
				this._Team_id = value;
				this.SendPropertyChanged("Team_id");
				this.OnTeam_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Project_Owner", Storage="_User", ThisKey="Owner", OtherKey="User_id", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Project.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Project.Add(this);
					this._Owner = value.User_id;
				}
				else
				{
					this._Owner = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Project_Team", Storage="_Team", ThisKey="Team_id", OtherKey="Team_id", IsForeignKey=true)]
	public Team Team
	{
		get
		{
			return this._Team.Entity;
		}
		set
		{
			Team previousValue = this._Team.Entity;
			if (((previousValue != value) 
						|| (this._Team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team.Entity = null;
					previousValue.Project.Remove(this);
				}
				this._Team.Entity = value;
				if ((value != null))
				{
					value.Project.Add(this);
					this._Team_id = value.Team_id;
				}
				else
				{
					this._Team_id = default(int);
				}
				this.SendPropertyChanged("Team");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Sprint_Project", Storage="_Sprint", ThisKey="Project_id", OtherKey="Project_id", DeleteRule="NO ACTION")]
	public EntitySet<Sprint> Sprint
	{
		get
		{
			return this._Sprint;
		}
		set
		{
			this._Sprint.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Sprint(Sprint entity)
	{
		this.SendPropertyChanging();
		entity.Project = this;
	}
	
	private void detach_Sprint(Sprint entity)
	{
		this.SendPropertyChanging();
		entity.Project = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sprint")]
public partial class Sprint : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Sprint_id;
	
	private string _Sprint_name;
	
	private System.DateTime _Start_date;
	
	private System.Nullable<System.DateTime> _End_date;
	
	private int _Project_id;
	
	private EntityRef<Project> _Project;
	
	private EntitySet<Story> _Story;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnSprint_idChanging(int value);
	partial void OnSprint_idChanged();
	partial void OnSprint_nameChanging(string value);
	partial void OnSprint_nameChanged();
	partial void OnStart_dateChanging(System.DateTime value);
	partial void OnStart_dateChanged();
	partial void OnEnd_dateChanging(System.Nullable<System.DateTime> value);
	partial void OnEnd_dateChanged();
	partial void OnProject_idChanging(int value);
	partial void OnProject_idChanged();
	#endregion
	
	public Sprint()
	{
		this._Project = default(EntityRef<Project>);
		this._Story = new EntitySet<Story>(new Action<Story>(this.attach_Story), new Action<Story>(this.detach_Story));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sprint_id", Storage="_Sprint_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Sprint_id
	{
		get
		{
			return this._Sprint_id;
		}
		set
		{
			if ((this._Sprint_id != value))
			{
				this.OnSprint_idChanging(value);
				this.SendPropertyChanging();
				this._Sprint_id = value;
				this.SendPropertyChanged("Sprint_id");
				this.OnSprint_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sprint_name", Storage="_Sprint_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Sprint_name
	{
		get
		{
			return this._Sprint_name;
		}
		set
		{
			if ((this._Sprint_name != value))
			{
				this.OnSprint_nameChanging(value);
				this.SendPropertyChanging();
				this._Sprint_name = value;
				this.SendPropertyChanged("Sprint_name");
				this.OnSprint_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="start_date", Storage="_Start_date", DbType="Date NOT NULL")]
	public System.DateTime Start_date
	{
		get
		{
			return this._Start_date;
		}
		set
		{
			if ((this._Start_date != value))
			{
				this.OnStart_dateChanging(value);
				this.SendPropertyChanging();
				this._Start_date = value;
				this.SendPropertyChanged("Start_date");
				this.OnStart_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="end_date", Storage="_End_date", DbType="Date")]
	public System.Nullable<System.DateTime> End_date
	{
		get
		{
			return this._End_date;
		}
		set
		{
			if ((this._End_date != value))
			{
				this.OnEnd_dateChanging(value);
				this.SendPropertyChanging();
				this._End_date = value;
				this.SendPropertyChanged("End_date");
				this.OnEnd_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="project_id", Storage="_Project_id", DbType="Int NOT NULL")]
	public int Project_id
	{
		get
		{
			return this._Project_id;
		}
		set
		{
			if ((this._Project_id != value))
			{
				this.OnProject_idChanging(value);
				this.SendPropertyChanging();
				this._Project_id = value;
				this.SendPropertyChanged("Project_id");
				this.OnProject_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Sprint_Project", Storage="_Project", ThisKey="Project_id", OtherKey="Project_id", IsForeignKey=true)]
	public Project Project
	{
		get
		{
			return this._Project.Entity;
		}
		set
		{
			Project previousValue = this._Project.Entity;
			if (((previousValue != value) 
						|| (this._Project.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Project.Entity = null;
					previousValue.Sprint.Remove(this);
				}
				this._Project.Entity = value;
				if ((value != null))
				{
					value.Sprint.Add(this);
					this._Project_id = value.Project_id;
				}
				else
				{
					this._Project_id = default(int);
				}
				this.SendPropertyChanged("Project");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Story_Sprint", Storage="_Story", ThisKey="Sprint_id", OtherKey="Sprint_id", DeleteRule="NO ACTION")]
	public EntitySet<Story> Story
	{
		get
		{
			return this._Story;
		}
		set
		{
			this._Story.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Story(Story entity)
	{
		this.SendPropertyChanging();
		entity.Sprint = this;
	}
	
	private void detach_Story(Story entity)
	{
		this.SendPropertyChanging();
		entity.Sprint = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Story")]
public partial class Story : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Story_id;
	
	private int _Priority_num;
	
	private int _Sprint_id;
	
	private string _Text;
	
	private EntityRef<Sprint> _Sprint;
	
	private EntitySet<Task> _Task;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnStory_idChanging(int value);
	partial void OnStory_idChanged();
	partial void OnPriority_numChanging(int value);
	partial void OnPriority_numChanged();
	partial void OnSprint_idChanging(int value);
	partial void OnSprint_idChanged();
	partial void OnTextChanging(string value);
	partial void OnTextChanged();
	#endregion
	
	public Story()
	{
		this._Sprint = default(EntityRef<Sprint>);
		this._Task = new EntitySet<Task>(new Action<Task>(this.attach_Task), new Action<Task>(this.detach_Task));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="story_id", Storage="_Story_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Story_id
	{
		get
		{
			return this._Story_id;
		}
		set
		{
			if ((this._Story_id != value))
			{
				this.OnStory_idChanging(value);
				this.SendPropertyChanging();
				this._Story_id = value;
				this.SendPropertyChanged("Story_id");
				this.OnStory_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="priority_num", Storage="_Priority_num", DbType="Int NOT NULL")]
	public int Priority_num
	{
		get
		{
			return this._Priority_num;
		}
		set
		{
			if ((this._Priority_num != value))
			{
				this.OnPriority_numChanging(value);
				this.SendPropertyChanging();
				this._Priority_num = value;
				this.SendPropertyChanged("Priority_num");
				this.OnPriority_numChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sprint_id", Storage="_Sprint_id", DbType="Int NOT NULL")]
	public int Sprint_id
	{
		get
		{
			return this._Sprint_id;
		}
		set
		{
			if ((this._Sprint_id != value))
			{
				this.OnSprint_idChanging(value);
				this.SendPropertyChanging();
				this._Sprint_id = value;
				this.SendPropertyChanged("Sprint_id");
				this.OnSprint_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="text", Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this.OnTextChanging(value);
				this.SendPropertyChanging();
				this._Text = value;
				this.SendPropertyChanged("Text");
				this.OnTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Story_Sprint", Storage="_Sprint", ThisKey="Sprint_id", OtherKey="Sprint_id", IsForeignKey=true)]
	public Sprint Sprint
	{
		get
		{
			return this._Sprint.Entity;
		}
		set
		{
			Sprint previousValue = this._Sprint.Entity;
			if (((previousValue != value) 
						|| (this._Sprint.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Sprint.Entity = null;
					previousValue.Story.Remove(this);
				}
				this._Sprint.Entity = value;
				if ((value != null))
				{
					value.Story.Add(this);
					this._Sprint_id = value.Sprint_id;
				}
				else
				{
					this._Sprint_id = default(int);
				}
				this.SendPropertyChanged("Sprint");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Task_Story", Storage="_Task", ThisKey="Story_id", OtherKey="Story_id", DeleteRule="NO ACTION")]
	public EntitySet<Task> Task
	{
		get
		{
			return this._Task;
		}
		set
		{
			this._Task.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Task(Task entity)
	{
		this.SendPropertyChanging();
		entity.Story = this;
	}
	
	private void detach_Task(Task entity)
	{
		this.SendPropertyChanging();
		entity.Story = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Task_id;
	
	private int _Story_id;
	
	private string _Text;
	
	private System.Nullable<int> _Owner;
	
	private System.Data.Linq.Binary _Type;
	
	private int _Size_complexity;
	
	private int _Business_value;
	
	private System.Nullable<System.DateTime> _Completion_date;
	
	private System.Data.Linq.Binary _State;
	
	private EntityRef<Story> _Story;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnTask_idChanging(int value);
	partial void OnTask_idChanged();
	partial void OnStory_idChanging(int value);
	partial void OnStory_idChanged();
	partial void OnTextChanging(string value);
	partial void OnTextChanged();
	partial void OnOwnerChanging(System.Nullable<int> value);
	partial void OnOwnerChanged();
	partial void OnTypeChanging(System.Data.Linq.Binary value);
	partial void OnTypeChanged();
	partial void OnSize_complexityChanging(int value);
	partial void OnSize_complexityChanged();
	partial void OnBusiness_valueChanging(int value);
	partial void OnBusiness_valueChanged();
	partial void OnCompletion_dateChanging(System.Nullable<System.DateTime> value);
	partial void OnCompletion_dateChanged();
	partial void OnStateChanging(System.Data.Linq.Binary value);
	partial void OnStateChanged();
	#endregion
	
	public Task()
	{
		this._Story = default(EntityRef<Story>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="task_id", Storage="_Task_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Task_id
	{
		get
		{
			return this._Task_id;
		}
		set
		{
			if ((this._Task_id != value))
			{
				this.OnTask_idChanging(value);
				this.SendPropertyChanging();
				this._Task_id = value;
				this.SendPropertyChanged("Task_id");
				this.OnTask_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="story_id", Storage="_Story_id", DbType="Int NOT NULL")]
	public int Story_id
	{
		get
		{
			return this._Story_id;
		}
		set
		{
			if ((this._Story_id != value))
			{
				this.OnStory_idChanging(value);
				this.SendPropertyChanging();
				this._Story_id = value;
				this.SendPropertyChanged("Story_id");
				this.OnStory_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="text", Storage="_Text", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
	public string Text
	{
		get
		{
			return this._Text;
		}
		set
		{
			if ((this._Text != value))
			{
				this.OnTextChanging(value);
				this.SendPropertyChanging();
				this._Text = value;
				this.SendPropertyChanged("Text");
				this.OnTextChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="owner", Storage="_Owner", DbType="Int")]
	public System.Nullable<int> Owner
	{
		get
		{
			return this._Owner;
		}
		set
		{
			if ((this._Owner != value))
			{
				this.OnOwnerChanging(value);
				this.SendPropertyChanging();
				this._Owner = value;
				this.SendPropertyChanged("Owner");
				this.OnOwnerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="type", Storage="_Type", DbType="Binary(3) NOT NULL", CanBeNull=false)]
	public System.Data.Linq.Binary Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="size_complexity", Storage="_Size_complexity", DbType="Int NOT NULL")]
	public int Size_complexity
	{
		get
		{
			return this._Size_complexity;
		}
		set
		{
			if ((this._Size_complexity != value))
			{
				this.OnSize_complexityChanging(value);
				this.SendPropertyChanging();
				this._Size_complexity = value;
				this.SendPropertyChanged("Size_complexity");
				this.OnSize_complexityChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="business_value", Storage="_Business_value", DbType="Int NOT NULL")]
	public int Business_value
	{
		get
		{
			return this._Business_value;
		}
		set
		{
			if ((this._Business_value != value))
			{
				this.OnBusiness_valueChanging(value);
				this.SendPropertyChanging();
				this._Business_value = value;
				this.SendPropertyChanged("Business_value");
				this.OnBusiness_valueChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="completion_date", Storage="_Completion_date", DbType="Date")]
	public System.Nullable<System.DateTime> Completion_date
	{
		get
		{
			return this._Completion_date;
		}
		set
		{
			if ((this._Completion_date != value))
			{
				this.OnCompletion_dateChanging(value);
				this.SendPropertyChanging();
				this._Completion_date = value;
				this.SendPropertyChanged("Completion_date");
				this.OnCompletion_dateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="state", Storage="_State", DbType="Binary(3) NOT NULL", CanBeNull=false)]
	public System.Data.Linq.Binary State
	{
		get
		{
			return this._State;
		}
		set
		{
			if ((this._State != value))
			{
				this.OnStateChanging(value);
				this.SendPropertyChanging();
				this._State = value;
				this.SendPropertyChanged("State");
				this.OnStateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Task_Story", Storage="_Story", ThisKey="Story_id", OtherKey="Story_id", IsForeignKey=true)]
	public Story Story
	{
		get
		{
			return this._Story.Entity;
		}
		set
		{
			Story previousValue = this._Story.Entity;
			if (((previousValue != value) 
						|| (this._Story.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Story.Entity = null;
					previousValue.Task.Remove(this);
				}
				this._Story.Entity = value;
				if ((value != null))
				{
					value.Task.Add(this);
					this._Story_id = value.Story_id;
				}
				else
				{
					this._Story_id = default(int);
				}
				this.SendPropertyChanged("Story");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Team")]
public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _Team_id;
	
	private int _Team_lead;
	
	private int _Manager;
	
	private string _Team_name;
	
	private EntitySet<Project> _Project;
	
	private EntityRef<User> _User;
	
	private EntityRef<User> _ManagerUser;
	
	private EntitySet<User> _Team_;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnTeam_idChanging(int value);
	partial void OnTeam_idChanged();
	partial void OnTeam_leadChanging(int value);
	partial void OnTeam_leadChanged();
	partial void OnManagerChanging(int value);
	partial void OnManagerChanged();
	partial void OnTeam_nameChanging(string value);
	partial void OnTeam_nameChanged();
	#endregion
	
	public Team()
	{
		this._Project = new EntitySet<Project>(new Action<Project>(this.attach_Project), new Action<Project>(this.detach_Project));
		this._User = default(EntityRef<User>);
		this._ManagerUser = default(EntityRef<User>);
		this._Team_ = new EntitySet<User>(new Action<User>(this.attach_Team_), new Action<User>(this.detach_Team_));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="team_id", Storage="_Team_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int Team_id
	{
		get
		{
			return this._Team_id;
		}
		set
		{
			if ((this._Team_id != value))
			{
				this.OnTeam_idChanging(value);
				this.SendPropertyChanging();
				this._Team_id = value;
				this.SendPropertyChanged("Team_id");
				this.OnTeam_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="team_lead", Storage="_Team_lead", DbType="Int NOT NULL")]
	public int Team_lead
	{
		get
		{
			return this._Team_lead;
		}
		set
		{
			if ((this._Team_lead != value))
			{
				this.OnTeam_leadChanging(value);
				this.SendPropertyChanging();
				this._Team_lead = value;
				this.SendPropertyChanged("Team_lead");
				this.OnTeam_leadChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="manager", Storage="_Manager", DbType="Int NOT NULL")]
	public int Manager
	{
		get
		{
			return this._Manager;
		}
		set
		{
			if ((this._Manager != value))
			{
				this.OnManagerChanging(value);
				this.SendPropertyChanging();
				this._Manager = value;
				this.SendPropertyChanged("Manager");
				this.OnManagerChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="team_name", Storage="_Team_name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Team_name
	{
		get
		{
			return this._Team_name;
		}
		set
		{
			if ((this._Team_name != value))
			{
				this.OnTeam_nameChanging(value);
				this.SendPropertyChanging();
				this._Team_name = value;
				this.SendPropertyChanged("Team_name");
				this.OnTeam_nameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Project_Team", Storage="_Project", ThisKey="Team_id", OtherKey="Team_id", DeleteRule="NO ACTION")]
	public EntitySet<Project> Project
	{
		get
		{
			return this._Project;
		}
		set
		{
			this._Project.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Team_Lead", Storage="_User", ThisKey="Team_lead", OtherKey="User_id", IsForeignKey=true)]
	public User User
	{
		get
		{
			return this._User.Entity;
		}
		set
		{
			User previousValue = this._User.Entity;
			if (((previousValue != value) 
						|| (this._User.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._User.Entity = null;
					previousValue.Team.Remove(this);
				}
				this._User.Entity = value;
				if ((value != null))
				{
					value.Team.Add(this);
					this._Team_lead = value.User_id;
				}
				else
				{
					this._Team_lead = default(int);
				}
				this.SendPropertyChanged("User");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Team_Manager", Storage="_ManagerUser", ThisKey="Manager", OtherKey="User_id", IsForeignKey=true)]
	public User ManagerUser
	{
		get
		{
			return this._ManagerUser.Entity;
		}
		set
		{
			User previousValue = this._ManagerUser.Entity;
			if (((previousValue != value) 
						|| (this._ManagerUser.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ManagerUser.Entity = null;
					previousValue.User_.Remove(this);
				}
				this._ManagerUser.Entity = value;
				if ((value != null))
				{
					value.User_.Add(this);
					this._Manager = value.User_id;
				}
				else
				{
					this._Manager = default(int);
				}
				this.SendPropertyChanged("ManagerUser");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_User_Team_ID", Storage="_Team_", ThisKey="Team_id", OtherKey="Team_id", DeleteRule="NO ACTION")]
	public EntitySet<User> Team_
	{
		get
		{
			return this._Team_;
		}
		set
		{
			this._Team_.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Project(Project entity)
	{
		this.SendPropertyChanging();
		entity.Team = this;
	}
	
	private void detach_Project(Project entity)
	{
		this.SendPropertyChanging();
		entity.Team = null;
	}
	
	private void attach_Team_(User entity)
	{
		this.SendPropertyChanging();
		entity.Team_ = this;
	}
	
	private void detach_Team_(User entity)
	{
		this.SendPropertyChanging();
		entity.Team_ = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.User")]
public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _User_id;
	
	private string _Password;
	
	private int _Team_id;
	
	private System.Data.Linq.Binary _Role;
	
	private string _Name;
	
	private EntitySet<Project> _Project;
	
	private EntitySet<Team> _Team;
	
	private EntitySet<Team> _User_;
	
	private EntityRef<Team> _Team_;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate(System.Data.Linq.ChangeAction action);
	partial void OnCreated();
	partial void OnUser_idChanging(int value);
	partial void OnUser_idChanged();
	partial void OnPasswordChanging(string value);
	partial void OnPasswordChanged();
	partial void OnTeam_idChanging(int value);
	partial void OnTeam_idChanged();
	partial void OnRoleChanging(System.Data.Linq.Binary value);
	partial void OnRoleChanged();
	partial void OnNameChanging(string value);
	partial void OnNameChanged();
	#endregion
	
	public User()
	{
		this._Project = new EntitySet<Project>(new Action<Project>(this.attach_Project), new Action<Project>(this.detach_Project));
		this._Team = new EntitySet<Team>(new Action<Team>(this.attach_Team), new Action<Team>(this.detach_Team));
		this._User_ = new EntitySet<Team>(new Action<Team>(this.attach_User_), new Action<Team>(this.detach_User_));
		this._Team_ = default(EntityRef<Team>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="user_id", Storage="_User_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int User_id
	{
		get
		{
			return this._User_id;
		}
		set
		{
			if ((this._User_id != value))
			{
				this.OnUser_idChanging(value);
				this.SendPropertyChanging();
				this._User_id = value;
				this.SendPropertyChanged("User_id");
				this.OnUser_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="password", Storage="_Password", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="team_id", Storage="_Team_id", DbType="Int NOT NULL")]
	public int Team_id
	{
		get
		{
			return this._Team_id;
		}
		set
		{
			if ((this._Team_id != value))
			{
				this.OnTeam_idChanging(value);
				this.SendPropertyChanging();
				this._Team_id = value;
				this.SendPropertyChanged("Team_id");
				this.OnTeam_idChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="role", Storage="_Role", DbType="Binary(3) NOT NULL", CanBeNull=false)]
	public System.Data.Linq.Binary Role
	{
		get
		{
			return this._Role;
		}
		set
		{
			if ((this._Role != value))
			{
				this.OnRoleChanging(value);
				this.SendPropertyChanging();
				this._Role = value;
				this.SendPropertyChanged("Role");
				this.OnRoleChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="name", Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Project_Owner", Storage="_Project", ThisKey="User_id", OtherKey="Owner", DeleteRule="NO ACTION")]
	public EntitySet<Project> Project
	{
		get
		{
			return this._Project;
		}
		set
		{
			this._Project.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Team_Lead", Storage="_Team", ThisKey="User_id", OtherKey="Team_lead", DeleteRule="NO ACTION")]
	public EntitySet<Team> Team
	{
		get
		{
			return this._Team;
		}
		set
		{
			this._Team.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_Team_Manager", Storage="_User_", ThisKey="User_id", OtherKey="Manager", DeleteRule="NO ACTION")]
	public EntitySet<Team> User_
	{
		get
		{
			return this._User_;
		}
		set
		{
			this._User_.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FK_User_Team_ID", Storage="_Team_", ThisKey="Team_id", OtherKey="Team_id", IsForeignKey=true)]
	public Team Team_
	{
		get
		{
			return this._Team_.Entity;
		}
		set
		{
			Team previousValue = this._Team_.Entity;
			if (((previousValue != value) 
						|| (this._Team_.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team_.Entity = null;
					previousValue.Team_.Remove(this);
				}
				this._Team_.Entity = value;
				if ((value != null))
				{
					value.Team_.Add(this);
					this._Team_id = value.Team_id;
				}
				else
				{
					this._Team_id = default(int);
				}
				this.SendPropertyChanged("Team_");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Project(Project entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Project(Project entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_Team(Team entity)
	{
		this.SendPropertyChanging();
		entity.User = this;
	}
	
	private void detach_Team(Team entity)
	{
		this.SendPropertyChanging();
		entity.User = null;
	}
	
	private void attach_User_(Team entity)
	{
		this.SendPropertyChanging();
		entity.ManagerUser = this;
	}
	
	private void detach_User_(Team entity)
	{
		this.SendPropertyChanging();
		entity.ManagerUser = null;
	}
}
#pragma warning restore 1591
